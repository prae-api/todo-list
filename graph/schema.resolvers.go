package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.29

import (
	"context"
	"errors"
	"fmt"

	"github.com/prae-api/review-it/graph/model"
)

// UpsertTodo is the resolver for the upsertTodo field.
func (r *mutationResolver) UpsertTodo(ctx context.Context, input model.TodoInput) (*model.Todo, error) {
	//insert new todo when id is not provided
	//update todo when id is provided

	// since the incoming input.ID is a pointer, you may need to check whether the value inside the pointer exists
	// so that the program does not crash when calling a null pointer
	if input.ID == nil {
		return nil, errors.New("input and id cannot be nil")
	}
	id := input.ID
	var todo model.Todo
	todo.Title = input.Title

	// this is how we usually declare the struct, this way we can also assign a variable to the field at the same time
	// todo := model.Todo{
	// 	Title: todo.Title,
	// }

	n := len(r.Resolver.TodoStore)
	if n == 0 {
		r.Resolver.TodoStore = make(map[int]model.Todo)
		// Usually we do not initialize the resolver variables in a resolver
		// Please refer to my comments in the file server.go
	}

	//update
	if id != nil {
		_, ok := r.Resolver.TodoStore[*id]
		if !ok {
			return nil, fmt.Errorf("id not found")
		}
		todo.ID = *id
		r.Resolver.TodoStore[*id] = todo
		// we can also access the TodoStore by doing
		// r.TodoStore[*id] = todo
	} else {
		//insert
		//generate new id
		nid := n + 1
		todo.ID = nid
		r.Resolver.TodoStore[nid] = todo
	}
	return &todo, nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id int) (bool, error) {
	//first check whether the given id exist or not
	_, ok := r.Resolver.TodoStore[id]
	if !ok {
		return false, fmt.Errorf("id not found")
	} else {
		delete(r.TodoStore, id)
	}

	return true, nil
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, id int) (*model.Todo, error) {
	todo, ok := r.Resolver.TodoStore[id]

	if !ok {
		return nil, fmt.Errorf("id not found")
	}

	return &todo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	allTodo := []*model.Todo{}
	for _, todo := range r.Resolver.TodoStore {
		each_todo := todo
		allTodo = append(allTodo, &each_todo)
	}

	return allTodo, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
